1. git init 初始化一个仓库（本地）

2. git add 添加文件到仓库里（本地） 添加到保存的列表中
   add 命令没有任何反馈
> git add <文件名称>
> git add . //添加当前目录的所有文件到仓库

3. git commit 暂存到仓库

> git commit -m "描述信息"


4. git branch 创建分支

> git branch <分支名称>
> git branch master //创建一个主分支
> git branch // 查看分支
> git branch <分支名称> -D  删除分支

5. git checkout 切换分支

> git checkout <已创建的分支名称>
> git branch dev
> git checkout dev
Switched to branch 'dev'  //已经切换到dev 分支了
```

6. git merge 合并分支用的

> git merge <合并的分支名称>


7. git remote 配置远端仓库的信息（创建的是一个空项目）

> git remote add <仓库别名> <仓库的地址>
> git remote add github https://github.com/ranyunlong/lemon4-08.git
> git remote remove <仓库别名> 删除掉本地远程仓库的配置信息

7.1. git config
git config --global user.name <用户名> 
git config --global user.email <邮箱>
git config --list 获取配置信息

8. git push 把项目上传远端仓库
> git push <仓库别名> <分支名称> //默认不加分支的时候是master分支
> git push -u <仓库别名> <分支名称> // -u 参数是设置默认上传分支


9. git clone 克隆项目
不需要init 初始化了 这里已经包含了一个仓库在里面了
clone 是在完全没有项目的情况下clone
> git clone <仓库地址> <分支名称> //默认不加分支的时候是master分支



10. git pull 拉取同步远程仓库代码

首先切换到对应的分支然后使用pull
用来更新当前的分支的代码
> git pull <仓库别名> <分支名称> // 如果有多个仓库的情况下 需要仓库别名 有多个分支的情况下需要分支名称

11. git fetch 下载
完全没有这个分支的时候使用fetch
> git fetch <仓库别名> <远程分支名称>:<本地分支名>
> git fetch origin dev:dev
