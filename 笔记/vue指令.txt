//优先考虑的问题，就是管理数据
//编写模版
//vue的工作就是把提供给它的数据和模版渲染出来
         
        //mvvm 框架
        //m Model
        //v View
        //vm ViewModel

        //简化项目
        //方便维护
        //考虑数据

拦截器 get set

用框架的好处
1、代码量少了
2、维护方便了
3、业务逻辑更清晰了

vue指令
一、双向和单项绑定
1、v-model 双向绑定指令（用它绑定的变量，既可以展示那个变量，也可以改变那个变量，用于表单元素）
2、{{变量名}}  插值表达式 （它只是用来输出展示的，单项绑定）
3、v-bind  单项绑定（可以绑定到html的任意一个属性上）,给属性绑定动态值
4、v-html  绑定html元素
5、v-text  绑定文本,和插值表达式不同的是插值表达式可以插入多个表达式，而v-text只能绑定一条

二、列表渲染
v-for="循环表达式" 
 <div v-for="循环的项目 in 要循环的数组或对象"></div>
 如果要获取数组的下标或者对象的key值
 <div v-for="（对应的内容,下标或key值)in 要循环的数组或对象"></div>
如果循环的是数组，没有第三个参数
如果循环的是一个对象，第三个参数就是下标，对象的下标（这是vue生成的）

三、条件渲染
1、v-show  显示和隐藏  使用display
   <div v-show="true/变量"></div>  显示 
   <div v-show="false/变量"></div>  隐藏

2、v-if    是否存在
  html元素要不要存在dom里面
  <div v-if="true/变量"></div>  dom里面存在该元素 (添加元素)
  <div v-if="true/变量"></div>  dom里面不存在该元素（删除元素）
  也可以添加表达式 v-if="input == 1"

  v-if   元素较多且不需要频繁展示时使用，减少消耗内存，性能较好
  v-show 如果元素需要频繁地显示和隐藏

  v-else-if
  v-else

四、绑定事件
   v-on  给元素绑定事件，不是原生html事件处理方式
   如果带了括号，则不传递事件对象
   不带括号则默认传递一个事件对象的参数
   <button v-on:click="click(100,$event)">点击</button> 这样就可以同时拿到参数和事件对象，兼容火狐
   <input type="text" v-on:keydown="keydown">
   <input type="text" v-on:input="keydown">  input事件反应比keydown事件快

五、扩展功能
 v-bind:style
 v-bind:class
 可以在里面添加数组和对象  加上v-bind了之后，后面输入代码的区域就相当于js编辑代码区域
 <div v-bind:style="{
            backgroundColor : 'red',
            height:'100px'
        }">34344</div>     
不用预设，直接给值，性能差一些

<div v-bind:class="{
           active:true
        }">haha</div>    
如果包含对象，对象的key是class名，对象value来决定样式是否要添加
class切换性能高一些，但是需要提前预设好样式

watch : 用来监控当前实例中成员发生变化
监听方式：在watch里面给当前实例的成员添加一个同名函数，就可以监听成员发生改变
当实例的属性有任意改变时，函数都会触发运行

